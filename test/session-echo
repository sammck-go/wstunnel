#!/usr/bin/env python3

# a very simple test server that accepts a connection, reads it all the way to the end, then echos
# it back.  Useful for making sure client is shutting down write side of socket properly before
# closing socket

import socket
import argparse
import sys

def dp(*args, **kwargs):
  print("DEBUG:", *args, file=sys.stderr, **kwargs)

parser = argparse.ArgumentParser()
parser.add_argument("port", type=int, help="Port number")
args = parser.parse_args()

s = socket.socket()

s.bind(('', args.port))
s.listen(5)

while True:
  while True:
    c, addr = s.accept()
    dp('Accepted connection from ', addr)
    result = bytes()
    while True:
      b = c.recv(4096)
      if b is None:
        dp("None received")
        break
      else:
        dp("%d bytes received" % len(b))
        if len(b) == 0:
          break
        result = result + b

    dp("%d total bytes received; sending" % len(result))
    n = 0
    while n < len(result):
      ntosend = len(result) - n
      if ntosend > 2048:
        ntosend = 2048
      nsent = c.send(result[n:n+ntosend])
      dp("%d bytes sent" % nsent)
      if nsent == 0:
        break
      n += nsent

    dp("%d total bytes sent" % n)
    if n < len(result):
      dp("failed to send %d bytes" % len(result)-n)
    dp("closing")
    c.close()
    dp("Success! end of connection") 

